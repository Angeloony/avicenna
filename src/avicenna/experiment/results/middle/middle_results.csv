1,empty
2,empty
3,empty
4,"(ForallFormula(BoundVariable(""elem_1"", ""<z>""), Constant(""start"", ""<start>""), ExistsFormula(BoundVariable(""elem_2"", ""<y>""), Constant(""start"", ""<start>""), SMTFormula('(> (str.to_int elem_1) (str.to_int elem_2))', BoundVariable(""elem_1"", ""<z>""), BoundVariable(""elem_2"", ""<y>""), ))), 1.0, 1.0)"
5,"(ConjunctiveFormula(ForallFormula(BoundVariable(""elem_1"", ""<y>""), Constant(""start"", ""<start>""), ExistsFormula(BoundVariable(""elem_2"", ""<x>""), Constant(""start"", ""<start>""), SMTFormula('(> (str.to_int elem_1) (str.to_int elem_2))', BoundVariable(""elem_1"", ""<y>""), BoundVariable(""elem_2"", ""<x>""), ))), ForallFormula(BoundVariable(""elem_0"", ""<z>""), Constant(""start"", ""<start>""), ExistsFormula(BoundVariable(""elem_3"", ""<y>""), Constant(""start"", ""<start>""), SMTFormula('(> (str.to_int elem_0) (str.to_int elem_3))', BoundVariable(""elem_0"", ""<z>""), BoundVariable(""elem_3"", ""<y>""), )))), 1.0, 1.0)"
6,"(ConjunctiveFormula(ForallFormula(BoundVariable(""elem_1"", ""<x>""), Constant(""start"", ""<start>""), ExistsFormula(BoundVariable(""elem_2"", ""<y>""), Constant(""start"", ""<start>""), SMTFormula('(>= (str.to_int elem_1) (str.to_int elem_2))', BoundVariable(""elem_1"", ""<x>""), BoundVariable(""elem_2"", ""<y>""), ))), ForallFormula(BoundVariable(""elem_0"", ""<z>""), Constant(""start"", ""<start>""), ExistsFormula(BoundVariable(""elem_3"", ""<y>""), Constant(""start"", ""<start>""), SMTFormula('(> (str.to_int elem_0) (str.to_int elem_3))', BoundVariable(""elem_0"", ""<z>""), BoundVariable(""elem_3"", ""<y>""), )))), 1.0, 1.0)"
7,"(ConjunctiveFormula(ForallFormula(BoundVariable(""elem_1"", ""<z>""), Constant(""start"", ""<start>""), ExistsFormula(BoundVariable(""elem_2"", ""<x>""), Constant(""start"", ""<start>""), SMTFormula('(> (str.to_int elem_1) (str.to_int elem_2))', BoundVariable(""elem_1"", ""<z>""), BoundVariable(""elem_2"", ""<x>""), ))), ForallFormula(BoundVariable(""elem_0"", ""<x>""), Constant(""start"", ""<start>""), ExistsFormula(BoundVariable(""elem_3"", ""<y>""), Constant(""start"", ""<start>""), SMTFormula('(>= (str.to_int elem_0) (str.to_int elem_3))', BoundVariable(""elem_0"", ""<x>""), BoundVariable(""elem_3"", ""<y>""), )))), 1.0, 1.0)"
8,empty
9,"(ForallFormula(BoundVariable(""elem_1"", ""<y>""), Constant(""start"", ""<start>""), ExistsFormula(BoundVariable(""elem_2"", ""<z>""), Constant(""start"", ""<start>""), SMTFormula('(>= (str.to_int elem_1) (str.to_int elem_2))', BoundVariable(""elem_1"", ""<y>""), BoundVariable(""elem_2"", ""<z>""), ))), 1.0, 1.0)"
10,"(ConjunctiveFormula(ForallFormula(BoundVariable(""elem_1"", ""<x>""), Constant(""start"", ""<start>""), ExistsFormula(BoundVariable(""elem_2"", ""<y>""), Constant(""start"", ""<start>""), SMTFormula('(> (str.to_int elem_1) (str.to_int elem_2))', BoundVariable(""elem_1"", ""<x>""), BoundVariable(""elem_2"", ""<y>""), ))), ForallFormula(BoundVariable(""elem_0"", ""<y>""), Constant(""start"", ""<start>""), ExistsFormula(BoundVariable(""elem_3"", ""<z>""), Constant(""start"", ""<start>""), SMTFormula('(>= (str.to_int elem_0) (str.to_int elem_3))', BoundVariable(""elem_0"", ""<y>""), BoundVariable(""elem_3"", ""<z>""), )))), 1.0, 1.0)"
11,"(ConjunctiveFormula(ForallFormula(BoundVariable(""elem_1"", ""<y>""), Constant(""start"", ""<start>""), ExistsFormula(BoundVariable(""elem_2"", ""<x>""), Constant(""start"", ""<start>""), SMTFormula('(>= (str.to_int elem_1) (str.to_int elem_2))', BoundVariable(""elem_1"", ""<y>""), BoundVariable(""elem_2"", ""<x>""), ))), ForallFormula(BoundVariable(""elem_0"", ""<y>""), Constant(""start"", ""<start>""), ExistsFormula(BoundVariable(""elem_3"", ""<z>""), Constant(""start"", ""<start>""), SMTFormula('(>= (str.to_int elem_0) (str.to_int elem_3))', BoundVariable(""elem_0"", ""<y>""), BoundVariable(""elem_3"", ""<z>""), )))), 1.0, 1.0)"
12,"(ConjunctiveFormula(ForallFormula(BoundVariable(""elem_1"", ""<x>""), Constant(""start"", ""<start>""), ExistsFormula(BoundVariable(""elem_2"", ""<z>""), Constant(""start"", ""<start>""), SMTFormula('(> (str.to_int elem_1) (str.to_int elem_2))', BoundVariable(""elem_1"", ""<x>""), BoundVariable(""elem_2"", ""<z>""), ))), ForallFormula(BoundVariable(""elem_0"", ""<y>""), Constant(""start"", ""<start>""), ExistsFormula(BoundVariable(""elem_3"", ""<x>""), Constant(""start"", ""<start>""), SMTFormula('(>= (str.to_int elem_0) (str.to_int elem_3))', BoundVariable(""elem_0"", ""<y>""), BoundVariable(""elem_3"", ""<x>""), )))), 1.0, 1.0)"
13,empty

markup
{'Line 1': [AssertionError('Avicenna requires at least one failure-inducing input!'), 0.13854694366455078], '
Line 2': [AssertionError('Avicenna requires at least one passing input!'), 0.10424160957336426], 
'Line 3': [AssertionError('Avicenna requires at least one passing input!'), 0.10951066017150879], 
'Line 4': [AssertionError('Avicenna requires at least one passing input!'), 0.12328767776489258], 
'Line 5': [AssertionError('Avicenna requires at least one failure-inducing input!'), 0.10340380668640137], '
Line 6': [AssertionError('Avicenna requires at least one passing input!'), 0.11400747299194336], 
'Line 7': [AssertionError('Avicenna requires at least one passing input!'), 0.17911672592163086], 
'Line 8': [ExistsFormula(BoundVariable("elem_xy", "<html>"), Constant("start", "<start>"), PredicateFormula(("StructuralPredicate(name='inside', arity=2, eval_fun=<function in_tree at 0x7f49835e4940>)", 'BoundVariable("elem_xy", "<html>"), Constant("start", "<start>")'))), 0.9565217391304348, 1.0, 252.35215997695923],
 'Line 9': [AssertionError('Avicenna requires at least one passing input!'), 0.13603568077087402],
  'Line 10': [ExistsFormula(BoundVariable("elem_xy", "<html>"), Constant("start", "<start>"), PredicateFormula(("StructuralPredicate(name='inside', arity=2, eval_fun=<function in_tree at 0x7f49835e4940>)", 'BoundVariable("elem_xy", "<html>"), Constant("start", "<start>")'))), 0.7333333333333334, 1.0, 154.25365567207336],
 'Line 11': [AssertionError('Avicenna requires at least one passing input!'), 0.25199317932128906], 
 'Line 12': ['No constraint was found for recall 0.9 and precision 0.6.', 238.46211433410645], 
'Line 13': [AssertionError('Avicenna requires at least one passing input!'), 0.16423583030700684], 
'Line 14': ['No constraint was found for recall 0.9 and precision 0.6.', 480.1134023666382],
 'Line 15': [AssertionError('Avicenna requires at least one failure-inducing input!'), 0.23948264122009277],
 'Line 16': [AssertionError('Avicenna requires at least one passing input!'), 0.11192703247070312]}}